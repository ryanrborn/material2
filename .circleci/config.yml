# Configuration file for https://circleci.com/gh/angular/material2

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See http://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# http://yaml-online-parser.appspot.com/

var_1: &docker_image angular/ngcontainer:0.7.0
var_2: &cache_key v2-ng-mat-{{ .Branch }}-{{ checksum "yarn.lock" }}-0.7.0

# Settings common to each job
var_3: &job_defaults
  working_directory: ~/ng
  docker:
    - image: *docker_image

# Job step for checking out the source code from GitHub. This also ensures that the source code
# is rebased on top of master.
var_4: &checkout_code
  checkout:
    # After checkout, rebase on top of master. By default, PRs are not rebased on top of master,
    # which we want. See https://discuss.circleci.com/t/1662
    post: git pull --ff-only origin "refs/pull/${CI_PULL_REQUEST//*pull\//}/merge"

# Restores the cache that could be available for the current Yarn lock file. The cache usually
# includes the node modules and the Bazel repository cache.
var_5: &restore_cache
  restore_cache:
    key: *cache_key

# Saves the cache for the current Yarn lock file. We store the node modules and the Bazel
# repository cache in order to make subsequent builds faster.
var_6: &save_cache
  save_cache:
    key: *cache_key
    paths:
      - "node_modules"
      - "~/bazel_repository_cache"

# Job step that ensures that the node module dependencies are installed and up-to-date. We use
# Yarn with the frozen lockfile option in order to make sure that lock file and package.json are
# in sync. Unlike in Travis, we don't need to manually purge the node modules if stale because
# CircleCI automatically discards the cache if the checksum of the lock file has changed.
var_7: &yarn_install
  run: yarn install --frozen-lockfile --non-interactive

# Copies the Bazel config which is specifically for CircleCI to a location where Bazel picks it
# up and merges it with the project-wide bazel configuration (tools/bazel.rc)
var_8: &copy_bazel_config
  # Set up the CircleCI specific bazel configuration.
  run: sudo cp ./.circleci/bazel.rc /etc/bazel.bazelrc

# Sets up a different Docker image that includes a moe recent Firefox version which
# is needed for headless testing.
var_9: &docker-firefox-image
  # TODO(devversion): Temporarily use a image that includes Firefox 62 because the
  # ngcontainer image does include an old Firefox version that does not support headless.
  # See the PR that fixes this: https://github.com/angular/angular/pull/26435
  - image: circleci/node:10.12-browsers

# Attaches the release output which has been stored in the workspace to the current job.
# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
var_10: &attach_release_output
  attach_workspace:
    at: dist/releases

# -----------------------------
# Container version of CircleCI
# -----------------------------
version: 2

# -----------------------------------------------------------------------------------------
# Job definitions. Jobs which are defined just here, will not run automatically. Each job
# must be part of a workflow definition in order to run for PRs and push builds.
# -----------------------------------------------------------------------------------------
jobs:

  # -----------------------------------
  # Build and test job that uses Bazel.
  # -----------------------------------
  bazel_build_test:
    <<: *job_defaults
    resource_class: xlarge
    steps:
      - *checkout_code
      - *restore_cache
      - *copy_bazel_config

      # TODO(jelbourn): Update this command to run all tests if the Bazel issues have been fixed.
      - run: bazel build src/...
      - run: bazel test src/...

  # ------------------------------------------------------------------------------------------
  # Job that runs the unit tests on locally installed browsers (Chrome and Firefox headless).
  # The available browsers are installed through the angular/ngcontainer Docker image.
  # ------------------------------------------------------------------------------------------
  tests_local_browsers:
    docker: *docker-firefox-image
    resource_class: xlarge
    environment:
      TEST_PLATFORM: local
    steps:
      - *checkout_code
      - *restore_cache
      - *yarn_install

      # Launches the unit tests. The platform is determined by the "TEST_PLATFORM" environment
      # variable which has been configured above
      - run: yarn gulp ci:test

  # ----------------------------------------------------------------
  # Job that runs the e2e tests with Protractor and Chrome Headless
  # ----------------------------------------------------------------
  e2e_tests:
    <<: *job_defaults
    resource_class: xlarge
    steps:
      - *checkout_code
      - *restore_cache
      - *yarn_install

      - run: yarn gulp ci:e2e

  # ----------------------------------------------------------------------------
  # Job that runs the unit tests on Browserstack. The browsers that will be used
  # to run the unit tests on Browserstack are set in: test/browser-providers.js
  # ----------------------------------------------------------------------------
  tests_browserstack:
    <<: *job_defaults
    resource_class: xlarge
    environment:
      BROWSER_STACK_USERNAME: "angularteam1"
      BROWSER_STACK_ACCESS_KEY: "CaXMeMHD9pr5PHg8N7Jq"
    steps:
      - *checkout_code
      - *restore_cache
      - *yarn_install

      - run: ./scripts/circleci/run-browserstack-tests.sh

  # ----------------------------------------------------------------------------
  # Job that runs the unit tests on Saucelabs. The browsers that will be used
  # to run the unit tests on Saucelabs are set in: test/browser-providers.js
  # ----------------------------------------------------------------------------
  tests_saucelabs:
    <<: *job_defaults
    resource_class: xlarge
    environment:
      SAUCE_USERNAME: "angular-ci"
      SAUCE_ACCESS_KEY: "9b988f434ff8-fbca-8aa4-4ae3-35442987"
    steps:
    - *checkout_code
    - *restore_cache
    - *yarn_install

    - run: ./scripts/circleci/run-saucelabs-tests.sh

  # -----------------------------------------------------------------------------------------
  # Job that builds the demo-app with AOT. In order to speed up this job, the release output
  # from the workspace storage will be attached to this job.
  # -----------------------------------------------------------------------------------------
  build_demoapp_aot:
    <<: *job_defaults
    steps:
      - *checkout_code
      - *restore_cache
      - *yarn_install
      - *attach_release_output

      - run: yarn gulp ci:aot

  # -------------------------------------------------------------------------
  # Job that pre-render's the universal app with `@angular/platform-server`.
  # This verifies that Angular Material can be rendered within Node.
  # -------------------------------------------------------------------------
  prerender_build:
    <<: *job_defaults
    steps:
    - *checkout_code
    - *restore_cache
    - *yarn_install

    - run: yarn gulp ci:prerender

  # ----------------------------------
  # Lint job. Runs the gulp lint task.
  # ----------------------------------
  lint:
    <<: *job_defaults
    steps:
      - *checkout_code
      - *restore_cache
      - *yarn_install

      - run: yarn gulp ci:lint

  # -------------------------------------------------------------------------------------------
  # Job that builds all release packages with Gulp. The built packages can be then used in the
  # same workflow to publish snapshot builds or test the demo-app with the release packages.
  # -------------------------------------------------------------------------------------------
  build_release_packages:
    <<: *job_defaults
    resource_class: xlarge
    steps:
      - *checkout_code
      - *restore_cache
      - *yarn_install

      - run: yarn gulp ci:build-release-packages

      # Store the release output in the workspace storage. This means that other jobs
      # in the same workflow can attach the release output to their job.
      - persist_to_workspace:
          root: dist/releases
          paths:
            - "**/*"

      # Since there is no UMD bundle that includes everything from the CDK, we need to move
      # all bundles into a directory. This allows us to store all CDK UMD bundles as job
      # artifacts that can be picked up by the Angular Github bot.
      - run:
          name: Prepare CDK artifacts for publish.
          command: |
            mkdir -p  /tmp/cdk-umd-artifacts
            cp dist/releases/cdk/bundles/*.umd.js /tmp/cdk-umd-artifacts

      # Publish bundle artifacts which will be used to calculate the size change.
      # Note: Make sure that the size plugin from the Angular robot fetches the artifacts
      # from this CircleCI job (see .github/angular-robot.yml). Additionally any artifacts need to
      # be stored with the following path format: "{projectName}/{context}/{fileName}"
      # This format is necessary because otherwise the bot is not able to pick up the
      # artifacts from CircleCI. See:
      # https://github.com/angular/github-robot/blob/master/functions/src/plugins/size.ts#L392-L394
      - store_artifacts:
          path: dist/releases/material/bundles/material.umd.js
          destination: /angular_material/material_release_output/material.umd.js
      - store_artifacts:
          path: /tmp/cdk-umd-artifacts
          destination: /angular_material/cdk_release_output/

      - *save_cache

  # ----------------------------------------
  # Job that publishes the build snapshots
  # ----------------------------------------
  publish_snapshots:
    <<: *job_defaults
    steps:
      # Since CircleCI currently does not have any way to easily restrict jobs to only run
      # for push builds, we need to manually skip publishing if the jobs runs for a PR.
      # https://discuss.circleci.com/t/workflows-pull-request-filter/14396/11
      - run:
          name: Check whether this job should be skipped.
          command: '[[ -n ${CIRCLE_PR_NUMBER} ]] && circleci step halt || true'

      - *checkout_code
      - *restore_cache
      - *yarn_install
      - *attach_release_output

      # CircleCI has a config setting to enforce SSH for all github connections.
      # This is not compatible with our mechanism of using a Personal Access Token
      # to publish the build snapshots. In order to fix this, we unset the global option.
      - run: git config --global --unset "url.ssh://git@github.com.insteadof"

      - run: ./scripts/circleci/publish-snapshots.sh

      - *save_cache

# ----------------------------------------------------------------------------------------
# Workflow definitions. A workflow usually groups multiple jobs together. This is useful if
# one job depends on another.
#
# NOTE: When updating this configuration section, make sure to update GitHub robot
#       config to match the new workflow jobs.
# ----------------------------------------------------------------------------------------
workflows:
  version: 2

  # Build and test workflow. A workflow includes multiple jobs that run in parallel. All jobs
  # that build and test source code should be part of this workflow
  build_and_test:
    jobs:
      - bazel_build_test

  unit_tests:
    jobs:
      - tests_local_browsers
      - tests_browserstack
      - tests_saucelabs

  integration_tests:
    jobs:
      - e2e_tests
      - prerender_build

  release_output:
    jobs:
      - build_release_packages
      - build_demoapp_aot:
          requires:
            - build_release_packages
      - publish_snapshots:
          requires:
            - build_release_packages

  # Lint workflow. As we want to lint in one job, this is a workflow with just one job.
  lint:
    jobs:
      - lint

# ---------------------------
# General setup for CircleCI
# ---------------------------
general:
  branches:
    only:
      - master
      - 7.0.x
      # 5.2.x, 6.0.x, etc
      - /\d+\.\d+\.x/
      # 5.x, 6.x, etc
      - /\d+\.x/
